name: Data-Lake/SQL-S3-Bucket-Replication

on:
  workflow_dispatch:
jobs:
  sql-s3-bucket-replication:
    runs-on: ubuntu-latest
    environment: PROD
    defaults:
      run:
        shell: bash
    env:
      INFISICAL_TOKEN: ${{ secrets.PR_INFISICAL_TOKEN }}
      INFISICAL_DOMAIN: ${{ secrets.PR_INFISICAL_DOMAIN }}
      INFISICAL_PATH: ${{ secrets.PR_INFISICAL_PATH }}
      INFISICAL_ENVIRONMENT: ${{ secrets.PR_INFISICAL_ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - name: Install Infisical
        run: |
          sudo apt-get update && curl -1sLf 'https://artifacts-cli.infisical.com/setup.deb.sh' | sudo bash
          sudo apt-get update && sudo apt-get install -y infisical
          infisical --version
        working-directory: Projects/Data-Lake

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Configure np-devops-deploy-user-prod AWS Profile
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile np-devops-deploy-user-prod
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile np-devops-deploy-user-prod

      - name: Configure np-devops-deploy-user-legacy AWS Profile
        run: |
          aws configure set aws_access_key_id ${{ secrets.LEGACY_ACCESS_KEY_ID }} --profile np-devops-deploy-user-legacy
          aws configure set aws_secret_access_key ${{ secrets.LEGACY_SECRET_ACCESS_KEY }} --profile np-devops-deploy-user-legacy

      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -backend-config BackendConfig/prod-backend-config.tfvars -no-color -input=false
        working-directory: Projects/Data-Lake/sql-s3-cross-account-replication

      - name: Terraform plan
        env:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: ${{ steps.extract_branch.outputs.branch }}
        run: |
          set -a
          infisical export --env "$INFISICAL_ENVIRONMENT" --path "$INFISICAL_PATH" --domain "$INFISICAL_DOMAIN" > infisical-vars.env && source infisical-vars.env && rm -rf infisical-vars.env
          set +a
          terraform plan -var='INFISICAL_TOKEN=${{env.INFISICAL_TOKEN}}' -var='ENV=${{env.ENV}}' -input=false -no-color -out=./tfplan | tee ./terraform-plan-output.txt
        continue-on-error: false
        working-directory: Projects/Data-Lake/sql-s3-cross-account-replication

      - name: Terraform apply
        env:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: ${{ steps.extract_branch.outputs.branch }}
        run: |
          set -a
          infisical export --env "$INFISICAL_ENVIRONMENT" --path "$INFISICAL_PATH" --domain "$INFISICAL_DOMAIN" > infisical-vars.env && source infisical-vars.env && rm -rf infisical-vars.env
          set +a
          terraform apply -var='ENV=${{env.ENV}}' -var='INFISICAL_TOKEN=${{env.INFISICAL_TOKEN}}' -input=false -no-color -auto-approve
        continue-on-error: false
        working-directory: Projects/Data-Lake/sql-s3-cross-account-replication
