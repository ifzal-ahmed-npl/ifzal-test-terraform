name: BDM-DataLake-Terraform-Deploy-Nonprod
run-name: Release ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release Tag"

  push:
    tags:
      - '[0-9].[0-9].[0-9]-nonprod'

jobs:
    datalake-terraform-plan-dev:
      environment: DEV
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      outputs:
        tag: ${{ steps.tags.outputs.new_tag }}
      steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - name: Checkout Release via Workflow Dispatch
        uses: actions/checkout@v3
        if: github.ref_name == 'dev'
        with:
          ref: ${{ github.inputs.release_tag }}
      - name: Checkout Release via Triggered Run
        uses: actions/checkout@v3
        if: startsWith(github.ref, 'refs/tags')
        with:
          ref: ${{ github.ref_name }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        working-directory: ${{ github.workspace }}
        run: |
          terraform init -backend-config BackendConfig/dev-backend-config.tfvars -no-color -input=false

      - name: Terraform plan
        working-directory: ${{ github.workspace }}
        run: |
          terraform plan -var-file=var-overrides/dev.tfvars -no-color -input=false -out=./tfplan | tee ./terraform-plan-output.txt

    datalake-terraform-apply-dev:
      environment: DEV
      runs-on: ubuntu-latest
      needs: datalake-terraform-plan-dev
      defaults:
        run:
          shell: bash
      outputs:
        tag: ${{ steps.tags.outputs.new_tag }}
      steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - name: Checkout Release via Workflow Dispatch
        uses: actions/checkout@v3
        if: github.ref_name == 'dev'
        with:
          ref: ${{ github.inputs.release_tag }}
      - name: Checkout Release via Triggered Run
        uses: actions/checkout@v3
        if: startsWith(github.ref, 'refs/tags')
        with:
          ref: ${{ github.ref_name }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform init -backend-config BackendConfig/dev-backend-config.tfvars -no-color -input=false

      - name: Terraform apply
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform apply -var-file=var-overrides/dev.tfvars -input=false -no-color -auto-approve

    datalake-terraform-plan-sit:
      environment: SIT
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      outputs:
        tag: ${{ steps.tags.outputs.new_tag }}
      steps:
      - name: Checkout Release via Workflow Dispatch
        uses: actions/checkout@v3
        if: github.ref_name == 'dev'
        with:
          ref: ${{ github.inputs.release_tag }}
      - name: Checkout Release via Triggered Run
        uses: actions/checkout@v3
        if: startsWith(github.ref, 'refs/tags')
        with:
          ref: ${{ github.ref_name }}
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform init -backend-config BackendConfig/sit-backend-config.tfvars -no-color -input=false

      - name: Terraform plan
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform plan -no-color -var-file=var-overrides/sit.tfvars-input=false -out=./tfplan | tee ./terraform-plan-output.txt

    datalake-terraform-apply-sit:
      environment: SIT
      runs-on: ubuntu-latest
      needs: datalake-terraform-plan-sit
      defaults:
        run:
          shell: bash
      outputs:
        tag: ${{ steps.tags.outputs.new_tag }}
      steps:
      - name: Checkout Release via Workflow Dispatch
        uses: actions/checkout@v3
        if: github.ref_name == 'dev'
        with:
          ref: ${{ github.inputs.release_tag }}
      - name: Checkout Release via Triggered Run
        uses: actions/checkout@v3
        if: startsWith(github.ref, 'refs/tags')
        with:
          ref: ${{ github.ref_name }}
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform init -backend-config BackendConfig/sit-backend-config.tfvars -no-color -input=false

      - name: Terraform apply
        working-directory: ${{ github.workspace }}/Projects/Data-Lake
        run: |
          terraform apply -var-file=var-overrides/sit.tfvars -input=false -no-color -auto-approve
